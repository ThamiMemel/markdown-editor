{"version":3,"sources":["serviceWorker.js","state/reducers/appReducer.js","state/reducers/settingsReducer.js","components/ActionsBar.js","components/Editor.js","components/Preview.js","state/actions/settingsActions.js","components/Settings.js","state/actions/appActions.js","components/App.js","index.js","state/configureStore.js"],"names":["Boolean","window","location","hostname","match","defaultState","editorText","localStorage","getItem","preview","marked","state","action","type","JSON","parse","editor","darkMode","fontSize","autoSave","ActionsBar","props","Navbar","bg","variant","Nav","className","DropdownButton","id","title","Dropdown","Item","onClick","handleExport","Button","document","getElementById","click","onChange","handleFileInput","accept","saveToLocalStorage","handleClear","handleOpenSettings","Editor","typingTimer","handleAutoSave","clearTimeout","setTimeout","autoSaveHelper","style","this","handleEditorChange","onKeyUp","value","React","Component","Preview","dangerouslySetInnerHTML","__html","setEditorDarkMode","boolean","setEditorAutoSave","setPreviewDarkMode","connect","settings","Container","handleCloseSettings","Form","handlePersistSettings","Check","label","checked","name","dispatch","step","e","parseInt","target","console","log","Number","isInteger","size","setEditorText","setPreview","App","settingsOpen","modalActive","modalTitle","modalText","showSaveModal","sanitize","setItem","setState","disableOnSaveModal","handleModalClose","keyboardHandler","keyCode","ctrlKey","preventDefault","FileReader","file","files","fileSize","fileReader","onload","result","readAsText","mode","mime","data","blob","Blob","saveAs","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","stringify","render","Modal","show","onHide","centered","Header","closeButton","Title","Body","Footer","app","store","createStore","combineReducers","appReducer","settingsReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.12b030f7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import marked from \"marked\";\n\nconst defaultState = {\n  editorText:\n    localStorage.getItem(\"editorText\") ||\n    `\\n# markdown-editor\\n\\nmarkdown-editor is a React App that uses [Marked] to let you convert [Markdown] into HTML.  Markdown is a simple text format whose goal is to be very easy to read and write, even when not converted to HTML.  This demo page will let you type anything you like and see how it gets converted.  Live.  No more waiting around.\\n\n  \\nHow To Use The Demo\\n-------------------\\n\\n1. Type in stuff on the left.\\n2. See the live updates on the right.\\n\\nThat's it.  Pretty simple. you can save your work locally (browser local storage) if you plan on coming back, There's also the option to import your files or export your work in 4 different :\\n\\n- **html:**  Web Page file.\\n- **md:**  Default markdown files extension.\\n- **txt:**  Good old txt file.\\n\\n\\`Why Markdown?\\`\\n-------------\\n\\nIt's easy.  It's not overly bloated, unlike HTML.  Also, as the creator of [markdown] says,\\n\\n> The overriding design goal for Markdown's\\n> formatting syntax is to make it as readable\\n> as possible. The idea is that a\\n> Markdown-formatted document should be\\n> publishable as-is, as plain text, without\\n> looking like it's been marked up with tags\\n> or formatting instructions.\\n\\n\\n[Marked]: https://github.com/markedjs/marked/\\n[Markdown]: http://daringfireball.net/projects/markdown/\\n\n  `,\n};\n\ndefaultState.preview = marked(defaultState.editorText);\nexport default (state = defaultState, action) => {\n  switch (action.type) {\n    case \"SET_EDITOR_TEXT\":\n      return { ...state, editorText: action.editorText };\n    case \"SET_PREVIEW_TEXT\":\n      return { ...state, preview: action.preview };\n    default:\n      return state;\n  }\n};\n","const defaultState = localStorage.getItem(\"settings\")\n  ? JSON.parse(localStorage.getItem(\"settings\"))\n  : {\n      editor: {\n        darkMode: true,\n        fontSize: 16,\n        autoSave: false,\n      },\n      preview: {\n        darkMode: false,\n      },\n    };\n\nexport default (state = defaultState, action) => {\n  switch (action.type) {\n    case \"SET_EDITOR_DARK_MODE\":\n      return {\n        ...state,\n        editor: {\n          ...state.editor,\n          darkMode: action.darkMode,\n        },\n      };\n    case \"SET_EDITOR_FONT_SIZE\":\n      return {\n        ...state,\n        editor: {\n          ...state.editor,\n          fontSize: action.fontSize,\n        },\n      };\n    case \"SET_EDITOR_AUTO_SAVE\":\n      return {\n        ...state,\n        editor: {\n          ...state.editor,\n          autoSave: action.autoSave,\n        },\n      };\n    case \"SET_PREVIEW_DARK_MODE\":\n      return {\n        ...state,\n        preview: {\n          ...state.preview,\n          darkMode: action.darkMode,\n        },\n      };\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport { Navbar, Nav, Button, DropdownButton, Dropdown } from \"react-bootstrap\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\n\nconst ActionsBar = (props) => (\n  <Navbar bg=\"dark\" variant=\"dark\">\n    <Nav className=\"mr-auto\">\n      <DropdownButton id=\"export-button\" title=\"Export\" variant=\"dark\">\n        <Dropdown.Item onClick={() => props.handleExport(\"html\")}>\n          as .html\n        </Dropdown.Item>\n        <Dropdown.Item onClick={() => props.handleExport(\"md\")}>\n          as .md\n        </Dropdown.Item>\n        <Dropdown.Item onClick={() => props.handleExport(\"txt\")}>\n          as .txt\n        </Dropdown.Item>\n      </DropdownButton>\n      <Button\n        id=\"import-button\"\n        variant=\"dark\"\n        onClick={() => {\n          const fileInput = document.getElementById(\"fileInput\");\n          fileInput.click();\n        }}\n      >\n        <input\n          type=\"file\"\n          id=\"fileInput\"\n          onChange={props.handleFileInput}\n          accept=\".txt,.md,\"\n        />\n        Import\n      </Button>\n      <Button\n        id=\"save-button\"\n        variant=\"dark\"\n        onClick={props.saveToLocalStorage}\n      >\n        Save\n      </Button>\n      <Button id=\"clear-button\" variant=\"dark\" onClick={props.handleClear}>\n        Clear\n      </Button>\n    </Nav>\n    <Button variant=\"dark\" onClick={props.handleOpenSettings}>\n      <SettingsIcon />\n    </Button>\n  </Navbar>\n);\n\nexport default ActionsBar;\n","import React from \"react\";\n\nclass Editor extends React.Component {\n  // for performance reasons we auto save only when the user is done typing\n  typingTimer = null;\n  handleAutoSave = () => {\n    clearTimeout(this.typingTimer);\n    this.typingTimer = setTimeout(() => {\n      this.props.autoSaveHelper();\n    }, 500);\n  };\n\n  render() {\n    return (\n      <textarea\n        id=\"editor\"\n        style={{ fontSize: this.props.fontSize }}\n        className={\n          \"editor flex-element \" +\n          (this.props.darkMode ? \"editor-dark\" : \"editor-light\")\n        }\n        onChange={this.props.handleEditorChange}\n        onKeyUp={this.handleAutoSave}\n        value={this.props.editorText}\n      ></textarea>\n    );\n  }\n}\n\nexport default Editor;\n","import React from \"react\";\n\nconst Preview = (props) => (\n  <div\n    id=\"preview\"\n    className={\"preview flex-element \" + (props.darkMode ? \"preview-dark\" : \"\")}\n    dangerouslySetInnerHTML={{ __html: props.preview }}\n  ></div>\n);\n\nexport default Preview;\n","export const setEditorDarkMode = (boolean) => ({\n  type: \"SET_EDITOR_DARK_MODE\",\n  darkMode: boolean,\n});\n\nexport const setEditorFontSize = (fontSize) => ({\n  type: \"SET_EDITOR_FONT_SIZE\",\n  fontSize,\n});\nexport const setEditorAutoSave = (boolean) => ({\n  type: \"SET_EDITOR_AUTO_SAVE\",\n  autoSave: boolean,\n});\n\nexport const setPreviewDarkMode = (boolean) => ({\n  type: \"SET_PREVIEW_DARK_MODE\",\n  darkMode: boolean,\n});\n","import React from \"react\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { Container } from \"@material-ui/core\";\nimport { Form } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport {\n  setEditorDarkMode,\n  setEditorAutoSave,\n  setEditorFontSize,\n  setPreviewDarkMode,\n} from \"../state/actions/settingsActions\";\n\nconst Settings = (props) => (\n  <Container>\n    <div className=\"settings\">\n      <div className=\"d-flex justify-content-between align-content-center mt-3\">\n        <h2>Editor</h2>\n        <div\n          className=\"mr-2 close-settings\"\n          onClick={props.handleCloseSettings}\n        >\n          <CloseIcon className=\"settings-close-button\" fontSize=\"large\" />\n        </div>\n      </div>\n      <div>\n        <Form className=\"ml-4\" onChange={props.handlePersistSettings}>\n          <h4>Dark Mode</h4>\n          <Form.Check\n            type=\"radio\"\n            id=\"dark-mode-editor-enable\"\n            label=\"Enable\"\n            checked={props.settings.editor.darkMode}\n            name=\"dark-mode-editor\"\n            onChange={() => props.dispatch(setEditorDarkMode(true))}\n          ></Form.Check>\n          <Form.Check\n            type=\"radio\"\n            id=\"dark-mode-editor-disable\"\n            label=\"Disable\"\n            checked={!props.settings.editor.darkMode}\n            name=\"dark-mode-editor\"\n            onChange={() => props.dispatch(setEditorDarkMode(false))}\n          ></Form.Check>\n          <h4>Autosave</h4>\n          <Form.Check\n            type=\"radio\"\n            id=\"autosave-enable\"\n            label=\"Enable\"\n            checked={props.settings.editor.autoSave}\n            name=\"autosave-editor\"\n            onChange={() => props.dispatch(setEditorAutoSave(true))}\n          ></Form.Check>\n          <Form.Check\n            type=\"radio\"\n            id=\"autosave-disable\"\n            label=\"Disable\"\n            checked={!props.settings.editor.autoSave}\n            name=\"autosave-editor\"\n            onChange={() => props.dispatch(setEditorAutoSave(false))}\n          ></Form.Check>\n          <h4>FontSize</h4>\n          <input\n            type=\"number\"\n            step=\"4\"\n            value={props.settings.editor.fontSize}\n            onChange={(e) => {\n              const value = parseInt(e.target.value);\n              console.log(value);\n              if (Number.isInteger(value)) {\n                props.dispatch(setEditorFontSize(value));\n              }\n            }}\n          ></input>\n        </Form>\n      </div>\n      <h2 className=\"mt-4\">Preview</h2>\n      <Form className=\"ml-4\" onChange={props.handlePersistSettings}>\n        <h4>Dark Mode</h4>\n        <Form.Check\n          type=\"radio\"\n          id=\"dark-mode-previw-enable\"\n          label=\"Enable\"\n          checked={props.settings.preview.darkMode}\n          name=\"dark-mode-preview\"\n          onChange={() => props.dispatch(setPreviewDarkMode(true))}\n        ></Form.Check>\n        <Form.Check\n          size=\"large\"\n          type=\"radio\"\n          id=\"dark-mode-preview-disable\"\n          label=\"Disable\"\n          checked={!props.settings.preview.darkMode}\n          name=\"dark-mode-preview\"\n          onChange={() => props.dispatch(setPreviewDarkMode(false))}\n        ></Form.Check>\n      </Form>\n    </div>\n  </Container>\n);\n\nconst mapStateToProps = (state) => {\n  return {\n    settings: state.settings,\n  };\n};\nexport default connect(mapStateToProps)(Settings);\n","export const setEditorText = (editorText) => ({\n  type: \"SET_EDITOR_TEXT\",\n  editorText,\n});\n\nexport const setPreview = (preview) => ({\n  type: \"SET_PREVIEW_TEXT\",\n  preview,\n});\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport marked from \"marked\";\nimport { sanitize } from \"dompurify\";\nimport { saveAs } from \"file-saver\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport ActionsBar from \"./ActionsBar\";\nimport Editor from \"./Editor\";\nimport Preview from \"./Preview\";\nimport Settings from \"./Settings\";\nimport { setEditorText, setPreview } from \"../state/actions/appActions\";\n\nclass App extends React.Component {\n  state = {\n    settingsOpen: false,\n    modalActive: false,\n    modalTitle: \"\",\n    modalText: \"\",\n    showSaveModal: localStorage.getItem(\"showSaveModal\")\n      ? JSON.parse(localStorage.getItem(\"showSaveModal\"))\n      : true,\n  };\n  handleEditorChange = (e) => {\n    const value = e.target.value;\n    this.props.dispatch(setEditorText(value));\n    this.props.dispatch(setPreview(sanitize(marked(value))));\n  };\n\n  saveToLocalStorage = () => {\n    localStorage.setItem(\"editorText\", this.props.editorText);\n    if (this.state.showSaveModal) {\n      this.setState(() => ({\n        modalActive: true,\n        modalTitle: \"Saved\",\n        modalText: \"Markdown saved successfully\",\n      }));\n    }\n  };\n\n  handleClear = () => {\n    this.props.dispatch(setEditorText(\"\"));\n    this.props.dispatch(setPreview(\"\"));\n  };\n\n  autoSaveHelper = () => {\n    if (this.props.settings.editor.autoSave) {\n      localStorage.setItem(\"editorText\", this.props.editorText);\n    }\n  };\n\n  disableOnSaveModal = () => {\n    localStorage.setItem(\"showSaveModal\", \"false\");\n    this.setState(() => ({ showSaveModal: false }));\n    this.handleModalClose();\n  };\n\n  handleModalClose = () => {\n    this.setState(() => ({\n      modalActive: false,\n      modalText: \"\",\n      modalTitle: \"\",\n    }));\n  };\n\n  keyboardHandler = (e) => {\n    if (e.keyCode === 83 && e.ctrlKey) {\n      e.preventDefault();\n      this.saveToLocalStorage();\n    }\n  };\n\n  handleFileInput = (e) => {\n    if (window.FileReader) {\n      const file = e.target.files[0];\n      const fileSize = file.size / 1024 / 1024;\n      const fileReader = new FileReader();\n      fileReader.onload = (e) => {\n        if (fileSize < 3) {\n          this.props.dispatch(setEditorText(e.target.result));\n          this.props.dispatch(setPreview(sanitize(marked(e.target.result))));\n        } else {\n          this.setState(() => ({\n            modalActive: true,\n            modalTitle: \"Alert\",\n            modalText:\n              \"Max upload size is 3 Mb, (you can still copy paste in the editor, but what the hell are you doing with a +3Mb markdown)\",\n          }));\n        }\n      };\n      fileReader.readAsText(file);\n    } else {\n      this.setState(() => ({\n        modalActive: true,\n        modalTitle: \"Error\",\n        modalText:\n          \"Your browser does not support FileReader API, please use an updated version of Firefox or Chrome\",\n      }));\n    }\n  };\n\n  handleExport = (mode) => {\n    let mime;\n    let data;\n    switch (mode) {\n      case \"html\":\n        mime = \"text/html\";\n        data = this.props.preview;\n        break;\n      case \"md\":\n        mime = \"text/markdown\";\n        data = this.props.editorText;\n        break;\n      case \"txt\":\n        mime = \"\";\n        data = this.props.editorText;\n        break;\n      default:\n        mime = \"\";\n        data = \"\";\n    }\n    const blob = new Blob([data], {\n      type: `${mime};charset=utf-8`,\n    });\n    saveAs(blob, `markdown.${mode}`);\n  };\n\n  handleCloseSettings = () => {\n    this.setState(() => ({ settingsOpen: false }));\n  };\n\n  handleOpenSettings = () => {\n    this.setState(() => ({ settingsOpen: true }));\n  };\n\n  componentDidMount = () => {\n    document.addEventListener(\"keydown\", this.keyboardHandler);\n  };\n\n  componentWillUnmount = () => {\n    document.removeEventListener(\"keydown\", this.keyboardHandler);\n  };\n\n  handlePersistSettings = () => {\n    setTimeout(() => {\n      localStorage.setItem(\"settings\", JSON.stringify(this.props.settings));\n    }, 500);\n  };\n\n  render = () => (\n    <div>\n      {!this.state.settingsOpen && (\n        <div className=\"fill animate__animated animate__fadeIn\">\n          <Modal\n            show={this.state.modalActive}\n            onHide={this.handleModalClose}\n            centered={true}\n          >\n            <Modal.Header closeButton>\n              <Modal.Title>{this.state.modalTitle}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>{this.state.modalText}</Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"primary\" onClick={this.handleModalClose}>\n                Okey\n              </Button>\n              <Button variant=\"secondary\" onClick={this.disableOnSaveModal}>\n                Don't show this again\n              </Button>\n            </Modal.Footer>\n          </Modal>\n          <ActionsBar\n            saveToLocalStorage={this.saveToLocalStorage}\n            handleFileInput={this.handleFileInput}\n            handleExport={this.handleExport}\n            handleOpenSettings={this.handleOpenSettings}\n            handleClear={this.handleClear}\n          />\n          <div className=\"flex-container \">\n            <Editor\n              handleEditorChange={this.handleEditorChange}\n              editorText={this.props.editorText}\n              darkMode={this.props.settings.editor.darkMode}\n              fontSize={this.props.settings.editor.fontSize}\n              autoSaveHelper={this.autoSaveHelper}\n            />\n            <Preview\n              preview={this.props.preview}\n              darkMode={this.props.settings.preview.darkMode}\n            />\n          </div>\n        </div>\n      )}\n      {this.state.settingsOpen && (\n        <div className=\"fill animate__animated animate__slideInRight animate__faster  black-bg\">\n          <Settings\n            handleCloseSettings={this.handleCloseSettings}\n            handlePersistSettings={this.handlePersistSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst mapStateToProps = ({ app, settings }) => {\n  return {\n    editorText: app.editorText,\n    preview: app.preview,\n    settings,\n  };\n};\nexport default connect(mapStateToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./state/configureStore\";\nimport App from \"./components/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/main.scss\";\nimport \"animate.css/animate.css\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, combineReducers } from \"redux\";\nimport appReducer from \"./reducers/appReducer\";\nimport settingsReducer from \"./reducers/settingsReducer\";\n\nexport default () => {\n  const store = createStore(\n    combineReducers({\n      app: appReducer,\n      settings: settingsReducer,\n    }),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n  return store;\n};\n"],"sourceRoot":""}